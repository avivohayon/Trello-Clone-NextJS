datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Board {
  id            String @id @default(uuid())
  orgId         String
  title         String
  imageId       String
  imageThumbUrl String @db.Text
  imageFullUrl  String @db.Text
  imageUserName String @db.Text
  imageLinkHTML String @db.Text

  lists List[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model List {
  id    String @id @default(uuid())
  title String
  order Int

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  cards Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}

model Card {
  id          String  @id @default(uuid())
  title       String
  order       Int
  description String? @db.Text

  listId String
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([listId])
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
  TEST
  QUESTION
}

enum REASON {
  START
  SUBMIT
  FINISH
  TRACKING
  INPUT
}

enum MEDIA_TYPE {
  CAMERA
  SCREENSHOT
  AUDIO
}

model Answer {
  id String @id @default(uuid())

  // we can extract the org id from the card realtion in the list and its realtion to the board

  orgId String

  boardId    String // the id of the board contain the tests
  boardTitle String // name of the test

  listId    String // the id of the question list  contain the questions card
  listTitle String // the name of the question list

  cardId   String // the id of the card contain the qustion itself
  question String @db.Text // the title of the card which is the question itself
  answer   String @db.Text // the answer of the user of the card question (its the card question description)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cardId])
}

model AuditLog {
  id     String @id @default(uuid())
  orgId  String
  action ACTION

  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String      @db.Text
  userName    String      @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MediaActivityLog {
  id String @id @default(uuid())

  orgId String // dynamic

  reason    REASON
  mediaType MEDIA_TYPE

  title       String
  description String

  dataUrl String @db.Text //base64-encoded

  userId    String
  userImage String @db.Text
  userName  String @db.Text
}

model OrgLimit {
  id    String @id @default(uuid())
  orgId String @unique
  count Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgSubscription {
  id    String @id @default(uuid())
  orgId String @unique

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}
